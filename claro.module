<?php
/**
 * @file Provides VoIP Drupal functionality for the Claro project
 */

foreach (array('claro.scripts.inc') as $file) {
  require_once(dirname(__FILE__) . DIRECTORY_SEPARATOR . $file);
}

/**
 * Implementation of hook_menu().
 */
function claro_menu() {
  $items['admin/voip/claro'] = array(
    'title' => 'NannyVan App Config',
    'description' => 'NannyVan App configuration page.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('claro_admin_settings_form'),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

function claro_admin_settings_form() {
  /*$form['claro_sms_footnote'] = array(
    '#type' => 'textfield',
    '#title' => t('SMS footnote'),
    '#description' => t('SMS footnote to apply at end of each SMS sent by the system'),
    '#default_value' => variable_get('claro_sms_footnote', ''),
  );*/

  /*$form['claro_news_script_number'] = array(
    '#type' => 'textfield',
    '#title' => t('Phone number for NannyVan News Recording'),
    '#description' => t('Phone number to be used for NannyVan News Recording.
    Number must be in the <a target="_blank" href="http://en.wikipedia.org/wiki/E.164">E.164</a> format.
    Supported formats include:
    <ul>
    <li>tel: Phone Number - must be proceeded by a + and the country code (i.e. +14155551212 for a US #)</li>
    </ul>
    '),
    '#size' => 40,
    '#maxlength' => 255,
    '#default_value' => variable_get('claro_news_script_number', '+13479675529'),
    '#required' => TRUE,
  );*/

  $form['claro_sms_help'] = array(
    '#type' => 'textarea',
    '#title' => t('SMS help'),
    '#description' => t('Text SMS help message'),
    '#default_value' => variable_get('claro_sms_help', 'To subscribe to the list please text SUBSCRIBE. To Stop getting messages, text S. For help, text H.'),
  );

  $form['claro_sms_welcome'] = array(
    '#type' => 'textarea',
    '#title' => t('SMS welcome'),
    '#description' => t('Welcome SMS for text to be sent the first time a user subscribes to the service.'),
    '#default_value' => variable_get('claro_sms_welcome', 'Welcome to NannyVan App'),
  );

  return system_settings_form($form);
}
function claro_node_presave($node) {
  global $user;
  if($node->type == 'phone_number') {
    if(!$node->title) {
      $node->title = $node->field_phone_number['und'][0]['vnid'];
    }
    if($node->status == 0) {
      watchdog('claro', 'sending verification');
      //Send verification only for guest users
      $number = $node->field_phone_number['und'][0]['vnid'];
      $call = new VoipCall();
      $call->setDestNumber($number);
      $text = 'Reply Y to give permission to join the mobile list.';
      //@todo: use queue?
      voip_text($text, $call);
      //drupal_get_messages('status');
      drupal_set_message("SMS invitation has been sent to your number.");
    }
  }
}

//@todo: Map languages to destination numbers
function claro_number_to_lang($number){
  /*$languages = array(
    '+16177022395' => 'en',
  );
  return isset($languages[$number]) ? $languages[$number] : 'en';*/
  return 'en';
}

/**
 * Implementation of hook_form_alter()
 */
function claro_form_alter(&$form, &$form_state, $form_id) {
  if ($form_id == 'phone_number_node_form') {
    drupal_add_js(drupal_get_path('module', 'claro').'/claro.js');
    drupal_set_title(t('Subscribe to SMS announcements'));

    $form["options"]["#title"] = t("Send Invitation Option");
    $form["options"]["status"]["#title"] = t("Add to the list without sending invitation?");
    $form["options"]["promote"]["#type"] = "hidden";
    $form["options"]["sticky"]["#type"] = "hidden";
  }
  else if($form_id == 'broadcast_node_form') {
   //_d($form);
    drupal_set_title(t('Create a Message'));
    drupal_add_js(drupal_get_path('module', 'claro').'/claro.js');
    $form['actions']['submit']['#value'] = t('Start');
    $form['actions']['preview']['#value'] = t('Test');

    $form['actions']['submit']['#weight'] = 1;
    $form['actions']['preview']['#weight'] = 0;

    $form['actions']['submit']['#attributes'] =
      array('onclick' => 'return confirm("It is important to test your message blast before actually doing it. Are you sure you want to start sending your messages now?");');

    $form['actions']['preview']['#submit'] = array('claro_broadcast_node_test');
    //so the $form_state['nid']  is available
    //$form['actions']['submit']['#submit'][]  = 'claro_broadcast_node_form_submit';
  }
  else if ($form_id == 'episode_node_form'){
    drupal_add_js(drupal_get_path('module', 'claro').'/claro.js');
  }
  return $form;
}

/*Send announcement to test number*/
function claro_broadcast_node_test($form, &$form_state) {
  $call = new VoipCall();
  $call->setDestNumber($form_state['values']['field_test_phone_number']['und'][0]['vnid']);
  $text = $form_state['values']['body']['und'][0]['value'];
  //@todo: use queue?
  voip_text($text, $call);
  drupal_set_message('SMS sent to test number '.$form_state['values']['field_test_phone_number']['und'][0]['vnid']);

  $form_state['rebuild'] = TRUE;
}





function claro_get_phone_number($phone_number) {
  $query = db_select('voipnumber', 'vn');
  $query->fields('vn');
  $query->condition('phone_number' , $phone_number);
  $query->leftJoin('field_data_field_phone_number', 'pn','pn.field_phone_number_vnid=vn.vnid');
  $query = $query->execute();
  $result = $query->fetchObject();
  if($result) {
    $phone_number = node_load($result->nid);
    return $phone_number;
  }
  return NULL;
}
/*
function _claro_get_phone_numbers() {
  $phone_numbers = array();
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'node')
    ->propertyCondition('type', 'phone_number')
    ->propertyCondition('status', 1)
    ->addMetaData('account', user_load(1)); // Run the query as user 1.
  $result = $query->execute();
  if (isset($result['node'])) {
    $phone_number_nids = array_keys($result['node']);
    $phone_number_items = node_load_multiple($phone_number_nids);
    foreach ($phone_number_items as $node) {
      $phone_numbers[$node->field_phone_number['und'][0]['vnid']] = $node->field_phone_number['und'][0]['vnid'];
    }
  }
watchdog('debug', 'pn '.print_r($phone_numbers,true));
  return $phone_numbers;
}*/
function _d($obj) {
  print '<pre>';
  var_dump($obj);
  print '</pre>';
  die();
}

function claro_action_info() {
  return array(
    'claro_remove_tags' => array( // declare the function name to be used. Replace the name with your function name
        'type' => 'entity', // can be node,comment etc
        'label' => t('Remove tag from selected contacts'), // the name of the operation which is displayed to the user.
        'configurable' => FALSE,
        'vbo_configurable' => TRUE,
        'pass rows' => TRUE, // this will ensure that the entire views row is passed as part of the context in your action callback.
      ),
    );
}

function claro_remove_tags_form($options) {
  if ($terms = taxonomy_get_tree(2)) {
    $tids = array();
    foreach ($terms as $term) {
      // Do something with $term->tid or $term->name
      $tids[$term->tid] = $term->name;
    }
  }
  $form = array();
  $form['tag'] = array(
    '#type' => 'select',
    '#title' => t('Choose groups to remove'),
    '#options' => $tids,
    '#default_value' => !empty($options['tag']) ? $options['tag'] : '',
  );
  return $form;
}

function claro_remove_tags_submit($form, $form_state) {
  $return = array();
  $return['tag'] = $form_state['values']['tag'];
  return $return;
}

function claro_remove_tags($entity, $context = array()) {
watchdog('debug', print_r($entity, true));

  if($context['tag']) {
    foreach($entity->field_groups['und'] as $delta => $groups) {
      if($groups['tid'] == $context['tag']) {
        unset($entity->field_groups['und'][$delta]);
      }
    }
   entity_save($entity->type, $entity);
  }
}